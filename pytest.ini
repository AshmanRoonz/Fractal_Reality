[pytest]
# Pytest configuration for Fractal Reality

# Test discovery patterns
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Directories to search for tests
testpaths =
    analysis/tests
    tests

# Minimum Python version
minversion = 6.0

# Add current directory to Python path
pythonpath = .

# Output options
addopts =
    # Verbose output
    -v
    # Show local variables in tracebacks
    --showlocals
    # Show summary of all test outcomes
    -ra
    # Strict markers (fail on unknown markers)
    --strict-markers
    # Strict config (fail on unknown config options)
    --strict-config
    # Show warnings
    -W default
    # Coverage reporting (if pytest-cov is installed)
    --cov=analysis
    --cov-report=html
    --cov-report=term-missing
    # Fail if coverage is below 80%
    --cov-fail-under=80
    # Show the slowest tests
    --durations=10
    # Enable parallel execution if pytest-xdist is installed
    # -n auto

# Markers for categorizing tests
markers =
    slow: marks tests as slow (deselect with '-m "not slow"')
    integration: marks tests as integration tests
    unit: marks tests as unit tests
    ligo: tests related to LIGO data analysis
    fractal: tests related to fractal dimension calculations
    visualization: tests related to visualizations
    empirical: tests using real empirical data
    network: tests that require network access
    requires_data: tests that require downloading large datasets

# Ignore directories
norecursedirs =
    .git
    .tox
    dist
    build
    *.egg
    node_modules
    venv
    env
    __pycache__
    .venv
    docs
    images
    reflections

# Console output style
console_output_style = progress

# Logging
log_cli = false
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Warnings
filterwarnings =
    # Treat warnings as errors (strict mode)
    error
    # But ignore specific warnings that we can't fix
    ignore::DeprecationWarning:matplotlib.*
    ignore::PendingDeprecationWarning
    # Ignore LIGO data access warnings
    ignore::UserWarning:gwosc.*

# Timeout for tests (requires pytest-timeout)
# timeout = 300

# Coverage options
[coverage:run]
source = analysis
omit =
    */tests/*
    */test_*.py
    */__init__.py
    */venv/*
    */env/*

[coverage:report]
precision = 2
show_missing = true
skip_covered = false

exclude_lines =
    # Standard pragma
    pragma: no cover
    # Don't complain about missing debug code
    def __repr__
    if self\.debug
    # Don't complain if tests don't hit defensive assertion code
    raise AssertionError
    raise NotImplementedError
    # Don't complain if non-runnable code isn't run
    if 0:
    if __name__ == .__main__.:
    # Don't complain about abstract methods
    @(abc\.)?abstractmethod

[coverage:html]
directory = htmlcov
