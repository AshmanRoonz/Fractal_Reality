name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  # Python testing job
  test-python:
    name: Python Tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.9', '3.10', '3.11']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Run pytest
      run: |
        pytest --cov=analysis --cov-report=xml --cov-report=term-missing -v

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # Python code quality job
  lint-python:
    name: Python Linting
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Run flake8
      run: |
        flake8 analysis/ --count --show-source --statistics

    - name: Run pylint
      run: |
        pylint analysis/ --exit-zero

    - name: Run mypy
      run: |
        mypy analysis/ --ignore-missing-imports --no-strict-optional || true

    - name: Check with black
      run: |
        black --check analysis/

  # TypeScript/JavaScript testing job
  test-typescript:
    name: TypeScript/React Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run TypeScript compiler
      run: npx tsc --noEmit

    - name: Run ESLint
      run: npx eslint docs/simulations/*.tsx --ext .ts,.tsx

    - name: Run Prettier check
      run: npx prettier --check "docs/**/*.{ts,tsx,js,jsx,json}"

    - name: Run tests
      run: npm test
      continue-on-error: true  # Tests may not exist yet

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit

    - name: Run safety check
      run: |
        pip install -r requirements.txt
        safety check --json || true

    - name: Run bandit
      run: |
        bandit -r analysis/ -f json -o bandit-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json

  # Documentation build check
  docs:
    name: Documentation Build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt

    - name: Check Markdown links
      uses: gaurav-nelson/github-action-markdown-link-check@v1
      with:
        use-quiet-mode: 'yes'
        config-file: '.github/markdown-link-check-config.json'
      continue-on-error: true

  # All checks passed
  all-checks:
    name: All Checks Passed
    needs: [test-python, lint-python, test-typescript, security, docs]
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Check if all jobs succeeded
      run: |
        if [ "${{ needs.test-python.result }}" == "success" ] && \
           [ "${{ needs.lint-python.result }}" == "success" ] && \
           [ "${{ needs.test-typescript.result }}" == "success" ] && \
           [ "${{ needs.security.result }}" == "success" ] && \
           [ "${{ needs.docs.result }}" == "success" ]; then
          echo "All checks passed!"
          exit 0
        else
          echo "Some checks failed"
          exit 1
        fi
